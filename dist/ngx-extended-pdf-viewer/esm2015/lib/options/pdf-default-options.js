const _isIE11 = typeof window === 'undefined' ? false : !!window.MSInputMethodContext && !!document.documentMode;
const isEdge = typeof navigator === 'undefined' || /Edge\/\d./i.test(navigator.userAgent);
const needsES5 = typeof ReadableStream === 'undefined' || typeof Promise['allSettled'] === 'undefined';
export let pdfjsVersion = '2.9.149';
export let pdfjsBleedingEdgeVersion = '2.10.363';
export function getVersionSuffix(folder) {
    if (folder && folder.includes('bleeding-edge')) {
        return pdfjsBleedingEdgeVersion;
    }
    return pdfjsVersion;
}
export let pdfDefaultOptions = {
    cursorToolOnLoad: 0,
    defaultUrl: '',
    defaultZoomValue: undefined,
    disableHistory: false,
    disablePageLabels: false,
    enablePrintAutoRotate: false,
    enableWebGL: false,
    eventBusDispatchToDOM: false,
    externalLinkRel: 'noopener noreferrer nofollow',
    externalLinkTarget: 0,
    historyUpdateUrl: false,
    imageResourcesPath: './images/',
    maxCanvasPixels: 16777216,
    pdfBugEnabled: false,
    removePageBorders: false,
    renderer: 'canvas',
    renderInteractiveForms: true,
    sidebarViewOnLoad: -1,
    scrollModeOnLoad: -1,
    spreadModeOnLoad: -1,
    textLayerMode: 2,
    useOnlyCssZoom: false,
    viewOnLoad: 0,
    cMapPacked: true,
    cMapUrl: () => './' + pdfDefaultOptions.assetsFolder + '/cmaps/',
    disableAutoFetch: false,
    disableCreateObjectURL: false,
    disableFontFace: false,
    disableRange: false,
    disableStream: false,
    isEvalSupported: true,
    maxImageSize: -1,
    pdfBug: false,
    postMessageTransfers: true,
    verbosity: 1,
    workerPort: null,
    assetsFolder: 'assets',
    sandboxBundleSrc: () => _isIE11 || isEdge || needsES5
        ? './' + pdfDefaultOptions.assetsFolder + '/pdf.sandbox-' + getVersionSuffix(pdfDefaultOptions.assetsFolder) + '-es5.js'
        : './' + pdfDefaultOptions.assetsFolder + '/pdf.sandbox-' + getVersionSuffix(pdfDefaultOptions.assetsFolder) + '.js',
    workerSrc: () => _isIE11 || isEdge || needsES5
        ? './' + pdfDefaultOptions.assetsFolder + '/pdf.worker-' + getVersionSuffix(pdfDefaultOptions.assetsFolder) + '-es5.js'
        : './' + pdfDefaultOptions.assetsFolder + '/pdf.worker-' + getVersionSuffix(pdfDefaultOptions.assetsFolder) + '.js',
    // options specific to ngx-extended-pdf-viewer (as opposed to being used by pdf.js)
    doubleTapZoomFactor: 'page-width'
};
if (typeof window !== 'undefined') {
    if (window.pdfDefaultOptions) {
        pdfDefaultOptions = window.pdfDefaultOptions;
    }
    else {
        window.pdfDefaultOptions = pdfDefaultOptions;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLWRlZmF1bHQtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1leHRlbmRlZC1wZGYtdmlld2VyL3NyYy9saWIvb3B0aW9ucy9wZGYtZGVmYXVsdC1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQU8sTUFBTyxDQUFDLG9CQUFvQixJQUFJLENBQUMsQ0FBTyxRQUFTLENBQUMsWUFBWSxDQUFDO0FBQy9ILE1BQU0sTUFBTSxHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxRixNQUFNLFFBQVEsR0FBRyxPQUFPLGNBQWMsS0FBSyxXQUFXLElBQUksT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssV0FBVyxDQUFDO0FBRXZHLE1BQU0sQ0FBQyxJQUFJLFlBQVksR0FBRyxTQUFTLENBQUM7QUFDcEMsTUFBTSxDQUFDLElBQUksd0JBQXdCLEdBQUcsVUFBVSxDQUFDO0FBRWpELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxNQUFjO0lBQzdDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDOUMsT0FBTyx3QkFBd0IsQ0FBQztLQUNqQztJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBSSxpQkFBaUIsR0FBRztJQUM3QixnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLFVBQVUsRUFBRSxFQUFFO0lBQ2QsZ0JBQWdCLEVBQUUsU0FBUztJQUMzQixjQUFjLEVBQUUsS0FBSztJQUNyQixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCLHFCQUFxQixFQUFFLEtBQUs7SUFDNUIsV0FBVyxFQUFFLEtBQUs7SUFDbEIscUJBQXFCLEVBQUUsS0FBSztJQUM1QixlQUFlLEVBQUUsOEJBQThCO0lBQy9DLGtCQUFrQixFQUFFLENBQUM7SUFDckIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixrQkFBa0IsRUFBRSxXQUFXO0lBQy9CLGVBQWUsRUFBRSxRQUFRO0lBQ3pCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsc0JBQXNCLEVBQUUsSUFBSTtJQUM1QixpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDckIsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUNwQixhQUFhLEVBQUUsQ0FBQztJQUNoQixjQUFjLEVBQUUsS0FBSztJQUNyQixVQUFVLEVBQUUsQ0FBQztJQUNiLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxHQUFHLFNBQVM7SUFDaEUsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixzQkFBc0IsRUFBRSxLQUFLO0lBQzdCLGVBQWUsRUFBRSxLQUFLO0lBQ3RCLFlBQVksRUFBRSxLQUFLO0lBQ25CLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDaEIsTUFBTSxFQUFFLEtBQUs7SUFDYixvQkFBb0IsRUFBRSxJQUFJO0lBQzFCLFNBQVMsRUFBRSxDQUFDO0lBQ1osVUFBVSxFQUFFLElBQUk7SUFDaEIsWUFBWSxFQUFFLFFBQVE7SUFDdEIsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQ3ZCLE9BQU8sSUFBSSxNQUFNLElBQUksUUFBUTtRQUMzQixDQUFDLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLFlBQVksR0FBRyxlQUFlLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLEdBQUcsU0FBUztRQUN4SCxDQUFDLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLFlBQVksR0FBRyxlQUFlLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSztJQUN0SCxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQ2QsT0FBTyxJQUFJLE1BQU0sSUFBSSxRQUFRO1FBQzNCLENBQUMsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxTQUFTO1FBQ3ZILENBQUMsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLO0lBRXZILG1GQUFtRjtJQUNuRixtQkFBbUIsRUFBRSxZQUFZO0NBQ2xDLENBQUM7QUFFRixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUNqQyxJQUFVLE1BQU8sQ0FBQyxpQkFBaUIsRUFBRTtRQUNuQyxpQkFBaUIsR0FBUyxNQUFPLENBQUMsaUJBQWlCLENBQUM7S0FDckQ7U0FBTTtRQUNDLE1BQU8sQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztLQUNyRDtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX2lzSUUxMSA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZmFsc2UgOiAhISg8YW55PndpbmRvdykuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgISEoPGFueT5kb2N1bWVudCkuZG9jdW1lbnRNb2RlO1xyXG5jb25zdCBpc0VkZ2UgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAvRWRnZVxcL1xcZC4vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5jb25zdCBuZWVkc0VTNSA9IHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIFByb21pc2VbJ2FsbFNldHRsZWQnXSA9PT0gJ3VuZGVmaW5lZCc7XHJcblxyXG5leHBvcnQgbGV0IHBkZmpzVmVyc2lvbiA9ICcyLjkuMTQ5JztcclxuZXhwb3J0IGxldCBwZGZqc0JsZWVkaW5nRWRnZVZlcnNpb24gPSAnMi4xMC4zNjMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnNpb25TdWZmaXgoZm9sZGVyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGlmIChmb2xkZXIgJiYgZm9sZGVyLmluY2x1ZGVzKCdibGVlZGluZy1lZGdlJykpIHtcclxuICAgIHJldHVybiBwZGZqc0JsZWVkaW5nRWRnZVZlcnNpb247XHJcbiAgfVxyXG4gIHJldHVybiBwZGZqc1ZlcnNpb247XHJcbn1cclxuXHJcbmV4cG9ydCBsZXQgcGRmRGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgY3Vyc29yVG9vbE9uTG9hZDogMCxcclxuICBkZWZhdWx0VXJsOiAnJyxcclxuICBkZWZhdWx0Wm9vbVZhbHVlOiB1bmRlZmluZWQsXHJcbiAgZGlzYWJsZUhpc3Rvcnk6IGZhbHNlLFxyXG4gIGRpc2FibGVQYWdlTGFiZWxzOiBmYWxzZSxcclxuICBlbmFibGVQcmludEF1dG9Sb3RhdGU6IGZhbHNlLFxyXG4gIGVuYWJsZVdlYkdMOiBmYWxzZSxcclxuICBldmVudEJ1c0Rpc3BhdGNoVG9ET006IGZhbHNlLFxyXG4gIGV4dGVybmFsTGlua1JlbDogJ25vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3cnLFxyXG4gIGV4dGVybmFsTGlua1RhcmdldDogMCxcclxuICBoaXN0b3J5VXBkYXRlVXJsOiBmYWxzZSxcclxuICBpbWFnZVJlc291cmNlc1BhdGg6ICcuL2ltYWdlcy8nLFxyXG4gIG1heENhbnZhc1BpeGVsczogMTY3NzcyMTYsXHJcbiAgcGRmQnVnRW5hYmxlZDogZmFsc2UsXHJcbiAgcmVtb3ZlUGFnZUJvcmRlcnM6IGZhbHNlLFxyXG4gIHJlbmRlcmVyOiAnY2FudmFzJyxcclxuICByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zOiB0cnVlLFxyXG4gIHNpZGViYXJWaWV3T25Mb2FkOiAtMSxcclxuICBzY3JvbGxNb2RlT25Mb2FkOiAtMSxcclxuICBzcHJlYWRNb2RlT25Mb2FkOiAtMSxcclxuICB0ZXh0TGF5ZXJNb2RlOiAyLFxyXG4gIHVzZU9ubHlDc3Nab29tOiBmYWxzZSxcclxuICB2aWV3T25Mb2FkOiAwLFxyXG4gIGNNYXBQYWNrZWQ6IHRydWUsXHJcbiAgY01hcFVybDogKCkgPT4gJy4vJyArIHBkZkRlZmF1bHRPcHRpb25zLmFzc2V0c0ZvbGRlciArICcvY21hcHMvJyxcclxuICBkaXNhYmxlQXV0b0ZldGNoOiBmYWxzZSxcclxuICBkaXNhYmxlQ3JlYXRlT2JqZWN0VVJMOiBmYWxzZSxcclxuICBkaXNhYmxlRm9udEZhY2U6IGZhbHNlLFxyXG4gIGRpc2FibGVSYW5nZTogZmFsc2UsXHJcbiAgZGlzYWJsZVN0cmVhbTogZmFsc2UsXHJcbiAgaXNFdmFsU3VwcG9ydGVkOiB0cnVlLFxyXG4gIG1heEltYWdlU2l6ZTogLTEsXHJcbiAgcGRmQnVnOiBmYWxzZSxcclxuICBwb3N0TWVzc2FnZVRyYW5zZmVyczogdHJ1ZSxcclxuICB2ZXJib3NpdHk6IDEsXHJcbiAgd29ya2VyUG9ydDogbnVsbCxcclxuICBhc3NldHNGb2xkZXI6ICdhc3NldHMnLFxyXG4gIHNhbmRib3hCdW5kbGVTcmM6ICgpID0+XHJcbiAgX2lzSUUxMSB8fCBpc0VkZ2UgfHwgbmVlZHNFUzVcclxuICAgID8gJy4vJyArIHBkZkRlZmF1bHRPcHRpb25zLmFzc2V0c0ZvbGRlciArICcvcGRmLnNhbmRib3gtJyArIGdldFZlcnNpb25TdWZmaXgocGRmRGVmYXVsdE9wdGlvbnMuYXNzZXRzRm9sZGVyKSArICctZXM1LmpzJ1xyXG4gICAgOiAnLi8nICsgcGRmRGVmYXVsdE9wdGlvbnMuYXNzZXRzRm9sZGVyICsgJy9wZGYuc2FuZGJveC0nICsgZ2V0VmVyc2lvblN1ZmZpeChwZGZEZWZhdWx0T3B0aW9ucy5hc3NldHNGb2xkZXIpICsgJy5qcycsXHJcbiAgd29ya2VyU3JjOiAoKSA9PlxyXG4gICAgX2lzSUUxMSB8fCBpc0VkZ2UgfHwgbmVlZHNFUzVcclxuICAgICAgPyAnLi8nICsgcGRmRGVmYXVsdE9wdGlvbnMuYXNzZXRzRm9sZGVyICsgJy9wZGYud29ya2VyLScgKyBnZXRWZXJzaW9uU3VmZml4KHBkZkRlZmF1bHRPcHRpb25zLmFzc2V0c0ZvbGRlcikgKyAnLWVzNS5qcydcclxuICAgICAgOiAnLi8nICsgcGRmRGVmYXVsdE9wdGlvbnMuYXNzZXRzRm9sZGVyICsgJy9wZGYud29ya2VyLScgKyBnZXRWZXJzaW9uU3VmZml4KHBkZkRlZmF1bHRPcHRpb25zLmFzc2V0c0ZvbGRlcikgKyAnLmpzJyxcclxuXHJcbiAgLy8gb3B0aW9ucyBzcGVjaWZpYyB0byBuZ3gtZXh0ZW5kZWQtcGRmLXZpZXdlciAoYXMgb3Bwb3NlZCB0byBiZWluZyB1c2VkIGJ5IHBkZi5qcylcclxuICBkb3VibGVUYXBab29tRmFjdG9yOiAncGFnZS13aWR0aCdcclxufTtcclxuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIGlmICgoPGFueT53aW5kb3cpLnBkZkRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICBwZGZEZWZhdWx0T3B0aW9ucyA9ICg8YW55PndpbmRvdykucGRmRGVmYXVsdE9wdGlvbnM7XHJcbiAgfSBlbHNlIHtcclxuICAgICg8YW55PndpbmRvdykucGRmRGVmYXVsdE9wdGlvbnMgPSBwZGZEZWZhdWx0T3B0aW9ucztcclxuICB9XHJcbn1cclxuIl19